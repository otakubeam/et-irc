str;
sys;
parse;

util;

export {

    type IrcdCommand = sum {
        | join: struct {
            channel: Str
        }

        | send: struct {
            channel: Str,
            message: Str,
        }
    };

    of String -> Maybe(IrcdCommand)
    fun parsein buffer;

    type IrcMessage = sum {
        | ping

        | leave: struct { nick: Str, }

        | join: struct {
            nick: Str,
            chan: Str,
        }

        | message: struct {
            nick: Str,
            chan: Str,
            msg: Str,
        }
    };

    of String -> Maybe(IrcMessage)
    fun parseout input;

    of IrcdCommand -> ()
    fun print_command cmd;

    of IrcMessage -> ()
    fun print_message msg;

}



fun print_command cmd = match cmd {
    | .join j:
        print("- Request JOIN %s\n",
            to_zero_terminated(j.channel))

    | .send s:
        print("- Request SEND '%s' to %s\n",
            to_zero_terminated(s.message),
            to_zero_terminated(s.channel))
    };


of Str -> Maybe(IrcdCommand)
fun join_channel str = match maybe_parse_word(str) {
    | .some word: .some.join.channel word
    | .none: {
        print("Could not parse channel name in %s\n",
            to_zero_terminated(str));
        .none
    }
    };


of Str -> Maybe(IrcdCommand)
fun send_message str = match maybe_parse_word(str) {
    | .none: { print("Could not parse channel name\n"); .none }
    | .some channel: {

        str = cut_and_skip(str, channel.size);

        match maybe_parse_word(str) {
        | .none: { print("Could not parse message\n"); .none }
        | .some message: .some.send { .channel = channel,
                                      .message = str }
        }
    }
    };


fun parsein input = {
    # print("Input string: '%s'\n", input);

    of Str var str = mk_str(input);

    skip_whitespace(&str);

    match str.data[0] {
    | ':': match str.data[1] {
        | 'j': return join_channel(cut_and_skip(str, 2))
        | 'm': return send_message(cut_and_skip(str, 2))
        | otherwise: print("Unexprected command prefix: %c", str.data[1])
        }
    | otherwise: print("Could not recongnize input string %s",
                     to_zero_terminated(str))
    };

    .none
};

######################################################################


of Str -> Str -> Maybe(IrcMessage)
fun parse_join content nick = if content.data[0] != ':' then
        .none
    else if content.data[1] != '#' then
        .none
    else match maybe_parse_word(cut_prefix(content, 2)) {
         | .some chan: .some.join { .nick = nick,
                                    .chan = chan, }
         | otherwise: .none
         }
    ;


of Str -> Str -> Maybe(IrcMessage)
fun parse_privmsg content nick = if content.data[0] != '#' {
        print("Unknown chan or user starting from %s\n",
                to_zero_terminated(content));
        .none
    } else match maybe_parse_word(cut_prefix(content, 1)) {
           | .none: .none
           | .some channel:
               .some.message {
                   .nick = nick,
                   .chan = channel,

                   # TODO: better
                   # .msg = content |> cut_and_skip(channel.size + 1)
                   #                |> cut_prefix(1)

                   .msg = cut_prefix(cut_and_skip(content, channel.size + 1), 1),
               }
           };


fun parseout input = {

    of Str var str = mk_str(input);
    skip_whitespace(&str);

    var s = split(str, '!');
    var nick = cut_prefix(s.before, 1);

    var content = split(s.after, ' ').after;
    skip_whitespace(&content);

    # :username!~host.name PRIVMSG #chan message

    if starts_with(content.data, "PRIVMSG") {
        content = cut_and_skip(content, 7);

        return if content.size <= 0 then
            .none
        else
            parse_privmsg(content, nick);
    };

    # :username!~host.name JOIN :#chan

    if starts_with(content.data, "JOIN") {
        content = cut_and_skip(content, 4);

        return if content.size <= 0 then
            .none
        else
            parse_join(content, nick);
    };

    # :username!~host.name PING ...
    # Note: need to answer PONG
    if starts_with(content.data, "QUIT") {
        return .some.leave.nick nick;
    };


    if starts_with(content.data, "PING") {
        return .some.ping;
    };

    .none
};


fun print_message msg = match msg {
    | .ping: print("PING\n")

    | .leave l: print("QUIT %s\n", to_zero_terminated(l.nick))

    | .join j: print("JOIN { user: @%s, chan: #%s }\n",
            to_zero_terminated(j.nick),
            to_zero_terminated(j.chan),)

    | .message m: print("MESSAGE (in #%s): @%s > %s\n",
            to_zero_terminated(m.chan),
            to_zero_terminated(m.nick),
            to_zero_terminated(m.msg),)
    };

@test fun test_join = {
    var join = ":tester!~oftc@93.175.5.164 JOIN :#etude";

    assert(match parseout(join) {
    | .some.join _: true
    | _: false
    });

    0
};

@test fun test_message = {
    var message = ":tester!~oftc@93.175.5.164 PRIVMSG #etude :Hello world?";

    assert(match parseout(message) {
    | .some.message m: true
    | _: false
    });

    0
};
