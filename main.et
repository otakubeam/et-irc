sys;

commands;

export {

    of Int -> *String -> Int
    @nomangle fun main argc argv;

    type IrcdSession = struct {
        meta: struct {
            host: String,
            port: String,
            nick: String,
        },
        bufin: String,
        bufout: String,

        serv_stream: *C_FILE,
    };

    ##################################################################

    of String -> String -> Int
    @nomangle fun dial host port;

    of *IrcdSession -> Unit
    @nomangle fun loop session;

    ##################################################################

    of *C_FD_SET -> Unit
    @nomangle fun fd_zero fd_set;

    of Int -> *C_FD_SET -> Unit
    @nomangle fun fd_set_ fd ptr;

    of Int -> *C_FD_SET -> Int
    @nomangle fun fd_isset fd ptr;

    ##################################################################


    of *C_FD_SET -> *IrcdSession -> Int
    @nomangle fun etude_handle rd session;

}

of String -> IrcdSession
fun init_session nick = {
    var ircd_url = "irc.oftc.net";
    var ircd_port = "6667";

    { .meta = { .host = ircd_url,
                .port = ircd_port,
                .nick = nick },
      .bufin = (new [4096] Char) ~> _,
      .bufout = (new [4096] Char) ~> _,
      .serv_stream = fdopen(dial(ircd_url, ircd_port), "r+"), }
};

of *IrcdSession -> Unit 
fun server_ping session = {
    fprintf(session->serv_stream, "PONG %s\r\n", session->meta.host);
};


of IrcdSession -> Unit
fun register_user session = {
    var stream = session.serv_stream;
    var nick = session.meta.nick;
    var host = session.meta.host;

    fprintf(stream, "NICK %s\r\n"  , nick);
    fprintf(stream, "USER %s "     , nick);
    fprintf(stream, "localhost %s ", host);
    fprintf(stream, ":%s\r\n"      , nick);

    fflush(stream);

    # Set IO unbuffered

    setbuf(stream, unit ~> _);

    var stdin = fdopen(0, "r+");
    var stdout = fdopen(1, "r+");

    setbuf(stdout, unit ~> _);
    setbuf(stdin, unit ~> _);
};


of *IrcdSession -> Str -> Str -> Unit
fun send_message sess chan msg = {
    var stream = sess->serv_stream;
    fprintf(stream, "PRIVMSG #%s ", to_zero_terminated(chan));
    fprintf(stream, ":%s\r\n"    , to_zero_terminated(msg));
};


of *IrcdSession -> Str -> Unit
fun join_channel sess chan = {
    var stream = sess->serv_stream;
    fprintf(stream, "JOIN #%s\r\n ", to_zero_terminated(chan));
};


of *IrcdSession -> IrcdCommand -> Unit
fun execute_command sess cmd = match cmd {
    | .join j: join_channel(sess, j.channel)
    | .send s: send_message(sess, s.channel, s.message)
    };


fun etude_handle rd sess = {
    var srv = sess->serv_stream;

    fd_zero(rd);
    fd_set_(0, rd);
    fd_set_(fileno(srv), rd);

    var fd = fileno(srv) + 1;
    var n = select(fd, rd, unit ~> _,
                           unit ~> _, unit ~> _);

    if n < 0 {
        print("Retry select %d\n", n);
        return 0;
    };

    if fd_isset(fileno(srv), rd) != 0 {
        fgets(sess->bufin, 4096, srv);
        match parseout(sess->bufin) {
        | .some msg: print_message(msg)
        | .some.ping: server_ping(sess)
        | .none: print("Error parsing '%s'\n", sess->bufin)
        };
    };

    if fd_isset(0, rd) != 0 {
        var stdin = fdopen(0, "r+");

        fgets(sess->bufin, 4096, stdin);

        match parsein(sess->bufin) {
        | .some cmd: execute_command(sess, cmd)
        | .none: unit
        };
    };

    0
};


fun main argc argv = {

    var sess = init_session(argv[1]);

    register_user(sess);

    sleep(1);

    join_channel(&sess, mk_str("etude"));

    loop(&sess);

    return 0;

    # To enable codegen
    etude_handle(new _, new _);

    0
};

